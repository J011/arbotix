#summary how to set stuff up

This page details software and hardware setup. We need a few pieces of software to get the most out of the ArbotiX:
 * *Arduino Software* - the IDE for creating code for our controller. 
 * *ArbotiX Distribution* - we'll also need to install some files to use the ArbotiX with the Arduino IDE.
 * *!PyPose* - A simple pose and capture program for the ArbotiX.

= Arduino Software Setup =
{{{
Arduino is an open-source electronics prototyping platform based on flexible, easy-to-use hardware and software. -- arduino.cc
}}}
The ArbotiX software is based on the [http://www.sanguino.cc Sanguino], the big brother of the [http://www.arduino.cc Arduino]. The first thing we need to do is to install the Arduino software:
 # Install the Arduino framework: follow the instructions at http://arduino.cc/en/Guide/HomePage

= ArbotiX Software Setup =
To use the ArbotiX with the Arduino IDE we need to add some files to our Arduino folder. Download the latest *ArbotiX-Software* release from the front page (or download from SVN), extract the zip file, and copy the following files:
 # The *cores/arbotix* folder needs to go into *arduino-0017/hardware/cores/arbotix*
 # The *bootloaders/atmega644p* folder needs to go into *arduino-0017/hardware/bootloaders/atmega644p*
 # All the folders in *libraries* need to be copied into *arduino-0017/hardware/libraries*
 # Append the contents of *boards.txt* from the distribution onto the end of *arduino-0017/hardware/boards.txt* file to include the ArbotiX definitions.
 # You may also want to copy the folders in *sketches*, especially _pypose_, into your sketchbook

Restart the Arduino IDE, from the *Tools -> Board* menu, select *ArbotiX* board. 

= !PyPose Setup =
!PyPose is a pose and capture program, written in Python using wxPython. We of course will have to install Python, wxPython, !PySerial to access serial ports, and then !PyPose itself.
 # Download and install Python 2.5: http://www.python.org/download/releases/2.5.4/
 # Download and install wxPython: http://www.wxpython.org/download.php
 # Download and install !PySerial: http://sourceforge.net/projects/pyserial/files/
 # Put the PyPose software in an easy to use location

If using Ubuntu, you can install items 1-3 of the above with: _sudo apt-get install python python-serial  python-wxgtk2.8_.

= Connecting Power, Etc =
Please see the downloadable ArbotiX manual for instructions and guidance in connecting external devices and power to the board. Although all boards ship with the _pypose_ sketch already installed, we recommend always upgrading to the newest version, in case changes have been made since your board was produced. 

= Downloading Code =
There are two ways to download code onto the ArbotiX: either with an FTDI cable or an In-System Programmer, although there are a number of different versions of each available:
 * *The FTDI breakout board* available from [http://www.sparkfun.com/commerce/product_info.php?products_id=9115 Sparkfun] will work with the Arduino environment out of the box. 
 * *[http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=768-1028-ND The FTDI Cable]* can be used with the Arduino environment, getting the auto-reset to work is a slight pain. The cable uses RTS rather than DTR for the reset signal. Here's how to fix it under Linux/MAC: http://www.arduino.cc/playground/Hacking/FTDIAutoReset
 * *To use an ISP* such as the [http://www.ladyada.net/make/usbtinyisp/ USBTinyISP] or an AVRISP you will have to adjust a few parameters, as Arduino uploads using the bootloader by default.
   # The USBTinyISP is recognized by Arduino out of the box, but you need to configure *boards.txt* to use it rather than the bootloader. Inside the Arbotix-Software release, you can replace the arbotix definition you copied to *arduino/hardware/boards.txt* with the one in *boardsISP.txt*. 
   # The AVRISP MKII, sold by Atmel, is a true USB device. It is also recognized by Arduino. You can copy the configuration from *boardsISP.txt* to your *arduino/hardware/boards.txt* but you have to change the second line to : 
{{{
arbotix.upload.using=avrispmkii
}}}
   # If you are using an ISP that acts like a virtual serial port, such as the ones from Pololu, you can use the step in #2, but you'll need to edit the definition of avrispmkii *arduino/hardware/programmers.txt* changing *usb* to *serial*: 
{{{
avrispmkii.name=AVRISP mkII
avrispmkii.communication=serial
avrispmkii.protocol=stk500v2
}}}
   # Under Linux, the newer Pololu ISP uses a new style of USB port, which appears as /dev/ttyACMx, which is not found by the Arduino environment. The easiest fix for this is to create a soft link from */dev/ttyS1 -> /dev/ttyACM0* assuming you have no ttyS1. 
   # See more at http://www.arduino.cc/en/Hacking/Programmer.  

_Note: An FTDI cable should not be connected at the same time as an XBEE radio is in the board. Always remove the XBEE radio before connecting an FTDI cable_

= Wireless Downloading =
With a bootloader on the ArbotiX, you can do wireless downloading. The arbotiX bootloader runs at a 38400 baud rate, so your XBEE radios need to be set to 38400 for wireless downloading. You'll also have to manually push the RESET button. A tutorial on getting around the reset button push is here: http://www.ladyada.net/make/xbee/arduino.html 

_Note: wireless bootloading may be dangerous, if you experience RF-interference something may go wrong. We do not recommend doing this unless you have an ISP to restore the bootloader._