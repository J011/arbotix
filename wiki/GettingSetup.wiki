#summary how to set stuff up

This page details software and hardware setup. This will take a few steps, but then you'll be set up to use your ArbotiX:
 * *Install Arduino Software* - the IDE for creating code for our controller. 
 * *Install ArbotiX Distribution* - we'll also need to install some files to use the ArbotiX with the Arduino IDE.
 * *Setup an ISP or FTDI Cable* so you can download code onto your ArbotiX.
 * *Learn About The Connectors* and how to apply power to your board
 * *Test Your Setup* and update pypose sketch at the same time. 
 * *Install !PyPose* - A simple pose and capture program for the ArbotiX.

= Arduino Software Setup =
{{{
Arduino is an open-source electronics prototyping platform based on flexible, easy-to-use hardware and software. -- arduino.cc
}}}
The ArbotiX software is based on the [http://www.sanguino.cc Sanguino], the big brother of the [http://www.arduino.cc Arduino]. The first thing we need to do is to install the Arduino software:
 # Install the Arduino framework: follow the instructions at http://arduino.cc/en/Guide/HomePage

The rest of this document assumes familiarity with the Arduino environment. See [http://arduino.cc the Arduino documents] for details on using the Arduino IDE.

= ArbotiX Software Setup =
To use the ArbotiX with the Arduino IDE we need to add some files to our Arduino folder. Download the latest *ArbotiX-Software* release from the front page (or download from SVN), extract the zip file, and copy the following files:
 # The *cores/arbotix* folder needs to go into *arduino-0017/hardware/cores/arbotix*
 # The *bootloaders/atmega644p* folder needs to go into *arduino-0017/hardware/bootloaders/atmega644p*
 # All the folders in *libraries* need to be copied into *arduino-0017/hardware/libraries*
 # You may also want to copy the folders in *sketches*, especially _pypose_, into your sketchbook

= Programmer and Board Setup =
The final step of setting up the ArbotiX Software is to append the appropriate ArbotiX configuration into the *arduino-0017/hardware/boards.txt* file. This configuration depends on what hardware will be used to load code onto the ArbotiX:  

=== FTDI Breakout Board === 
If using the *[http://www.trossenrobotics.com/p/FTDI-Basic-Breakout-5V.aspx Sparkfun FTDI breakout board]* we just need to copy the default settings into boards.txt. Copy the following into your boards.txt file
{{{
arbotix.name=ArbotiX
arbotix.upload.protocol=stk500
arbotix.upload.maximum_size=63488
arbotix.upload.speed=38400
arbotix.bootloader.low_fuses=0xFF
arbotix.bootloader.high_fuses=0xDC
arbotix.bootloader.extended_fuses=0xFD
arbotix.bootloader.path=atmega644p
arbotix.bootloader.file=ATmegaBOOT_644P.hex
arbotix.bootloader.unlock_bits=0x3F
arbotix.bootloader.lock_bits=0x0F
arbotix.build.mcu=atmega644p
arbotix.build.f_cpu=16000000L
arbotix.build.core=arbotix
arbotix.verbose=false
}}}

_Note: An FTDI cable should not be connected at the same time as an XBEE radio is in the board. Always remove the XBEE radio before connecting an FTDI cable_

=== Pololu ISP ===
If using the [http://www.trossenrobotics.com/p/Orangutan-USB-AVR-Programmer.aspx Pololu ISP] we need to add the following lines to boards.txt:
{{{
arbotix.name=ArbotiX
arbotix.upload.using=avrispv2
arbotix.upload.maximum_size=65536
arbotix.bootloader.low_fuses=0xFF
arbotix.bootloader.high_fuses=0xDC
arbotix.bootloader.extended_fuses=0xFD
arbotix.bootloader.path=atmega644p
arbotix.bootloader.file=ATmegaBOOT_644P.hex
arbotix.bootloader.unlock_bits=0x3F
arbotix.bootloader.lock_bits=0x0F
arbotix.build.mcu=atmega644p
arbotix.build.f_cpu=16000000L
arbotix.build.core=arbotix
arbotix.verbose=false
}}}
and we'll also need to add the following lines of code to the *arduino-0017/hardware/programmers.txt:
{{{
avrispv2.name=AVRISP V2
avrispv2.communication=serial
avrispv2.protocol=stk500v2
}}}
Under Linux, the newer Pololu ISP uses a new style of USB port, which appears as /dev/ttyACMx, which is not found by the Arduino environment. The easiest fix for this is to create a soft link from */dev/ttyS1 -> /dev/ttyACM0* assuming you have no ttyS1. 

=== USBTiny ISP===
If using the [http://www.ladyada.net/make/usbtinyisp/ USBTinyISP] we'll need to copy the following into the boards.txt file:
{{{
arbotix.name=ArbotiX
arbotix.upload.using=usbtinyisp
arbotix.upload.maximum_size=65536
arbotix.bootloader.low_fuses=0xFF
arbotix.bootloader.high_fuses=0xDC
arbotix.bootloader.extended_fuses=0xFD
arbotix.bootloader.path=atmega644p
arbotix.bootloader.file=ATmegaBOOT_644P.hex
arbotix.bootloader.unlock_bits=0x3F
arbotix.bootloader.lock_bits=0x0F
arbotix.build.mcu=atmega644p
arbotix.build.f_cpu=16000000L
arbotix.build.core=arbotix
arbotix.verbose=false
}}}

=== Wireless Downloading ===
With a bootloader on the ArbotiX, you can do wireless downloading. The arbotiX bootloader runs at a 38400 baud rate, so your XBEE radios need to be set to 38400 for wireless downloading. You'll also have to manually push the RESET button. A tutorial on getting around the reset button push is here: http://www.ladyada.net/make/xbee/arduino.html 

_Note: wireless bootloading is dangerous, if you experience RF-interference something may go wrong. We do not recommend doing this unless you have an ISP to restore the bootloader, and also have enough experience to know how to restore the bootloader._

<wiki:comment>
*[http://search.digikey.com/scripts/DkSearch/dksus.dll?Detail&name=768-1028-ND The FTDI Cable]* can be used with the Arduino environment, getting the auto-reset to work is a slight pain. The cable uses RTS rather than DTR for the reset signal. Here's how to fix it under Linux/MAC: http://www.arduino.cc/playground/Hacking/FTDIAutoReset
See more at http://www.arduino.cc/en/Hacking/Programmer.  
</wiki:comment>

= Connecting Power, Etc =
Please see the downloadable ArbotiX manual for instructions and guidance in connecting external devices and power to the board. Although all boards ship with the _pypose_ sketch already installed, we recommend always upgrading to the newest version, in case changes have been made since your board was produced. 

= Upload PyPose Sketch = 
Now, let's test our Arduino installation and programmer. Copy the *sketches/pypose* folder into your sketchbook, and open the sketch. Restart the Arduino IDE if it was already open. From the *Tools -> Board* menu, select *ArbotiX* board to make sure all went well above. Connect your board via either the ISP or FTDI cable, select the correct port, open the *pypose* sketch, and download it. While we ship each board with a version of pypose installed, it may not be the latest (in fact, it almost never is, since by the time the board gets to you, we've made PyPose better!)

= !PyPose Setup =
!PyPose is a pose and capture program, written in Python using wxPython. We of course will have to install Python, wxPython, !PySerial to access serial ports, and then !PyPose itself.
 # Download and install Python 2.5: http://www.python.org/download/releases/2.5.4/
 # Download and install wxPython: http://www.wxpython.org/download.php
 # Download and install !PySerial: http://sourceforge.net/projects/pyserial/files/
 # Put the !PyPose software in an easy to use location, and start pypose.py to run !PyPose.

If using Ubuntu, you can install items 1-3 of the above with: _sudo apt-get install python python-serial  python-wxgtk2.8_. 

= Connect with PyPose =
PyPose communicates over a serial link to the board, either through an FTDI cable or XBEEs. If using XBEEs, they must be set to 38400, and should be paired. 

Before PyPose can interact with our robot, we need to download a program (or a _sketch_ as the Arduino environment calls them) onto the arbotiX. This sketch is called "pypose", and can be found in the examples folder of the arbotiX distribution. It provides a pass through from the arbotiX to the Bioloid bus, by speaking the correct protocol with PyPose. The sketch comes on your arbotiX when you first purchase it, but if you have ever uploaded any other sketch, you will need to put _pypose_ back onto the arbotiX to use this capture program. 

We need to connect to the arbotiX in one of two ways: through an FTDI cable, or more likely through an XBEE connection. <font color="#FF0000"><Add Details></font>. Be sure to note which serial port you are using (under Windows, something like "COM4", or under Linux, something like "/dev/ttyUSB1"). 