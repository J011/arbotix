#summary basic pose and capture software

<font color="#FF0000">This Page Describes PyPose V0.91, which is a complete re-write using WxPython, and is currently under major development.

We need to add several things to the Install Page:
 * installing wx-python, from ubuntu, requires: sudo apt-get install python-wxgtk2.8
 * to install from windows/macOSX, use this page: </font>

= Introduction =
One of the most important features of AX-12 servos is that we can move the servo to a particular position by hand and read the position back from the servo. This feature allows us to _pose_ the robot, and _capture_ the pose. PyPose began as a simple open-source pose and capture program, written in Python and using wxPython for a graphical package. Traditionally, roboticists might create a series of poses, and then assemble them into a _motion sequence_.

As has often been said, there is more than one way to solve any problem. Motion sequences can be created extremely quickly using PyPose, but they do have limitations:
 * Poses are not dynamic: given a limited number of poses, you have a limited number of positions the body can go to.  
 * Sequence creation can become quite repetitive if you desire a higher degree of control of the robot.

The logical improvement is to _parameterize_ the poses. This is a very common approach, and one that PyPose supports. By adding or subtracting the value of a dynamic parameter we can vary the response of our poses and motion sequences far more than before. 

Of course, the holy grail of motion control is to have a fast Inverse Kinematics engine. Using inverse kinematics, we can compute how to place the foot of a robot into any position it can physically occupy. The _Nearly Universal Kinematics Engine_, or NUKE, is a highly templated IK solution for quadrupeds and hexapods. After answering a series of questions about the construction of the robot, we can automatically build an IK engine for the robot. Why then would we even offer poses and sequences? 
 * NUKE still has a limited number of configurations it can handle, if you are building something like a biped you will _have_ to use poses.  
 * IK can be slow. If you have other important code to run, you may not be able to run a full IK engine. 

Regardless of the method of motion creation, PyPose exports your work directly into C code that can be loaded onto the arbotiX using the Arduino IDE.

= Getting Started = 
Before we can get started, we need to download a program (or a _sketch_ as the Arduino environment calls them) onto the arbotiX. This sketch is called "pypose". It provides a pass through from the arbotiX to the Bioloid bus, by speaking the correct protocol with PyPose. The sketch comes on your arbotiX when you first purchase it, but if you have ever uploaded any other sketch, you will need to put _pypose_ back onto the arbotiX to use this capture program. We need to connect to the arbotiX in one of two ways: through an FTDI cable, or more likely through an XBEE connection. <Add Details>. Be sure to note which serial port you are using (under Windows, something like "COM4", or under Linux, something like "/dev/ttyUSB1"). 

Next, we can start PyPose, it should look like: 
<img src="http://arbotix.googlecode.com/svn/wiki/pypose.png">

You can open a port by clicking on *config|port* in the menu, and entering a port name in the dialog box that will pop up. The default baud rate for the arbotiX is 38400bps, if you are using XBEE radios, be sure they are paired, and set to 38400bps. A tutorial on setting up XBEE radios can be found at the [http://forums.trossenrobotics.com/tutorials/how-to-diy-128/xbee-basics-3259/ Trossen Robotic Community].
<img src="http://arbotix.googlecode.com/svn/wiki/serial.png">

= Creating a New Robot =
Before we actually capture a pose, we need to tell PyPose a little bit about our robot. When you click on *Robot|New* in the menu, a dialog box will prompt you for the robot's name, and the number of servos used in the robot. _Note: currently, servos must be number sequentially, if you have 12 servos, they must be ID1 to ID12._ We are now ready to begin actually talking with our robot. You can repeatedly save and open robot files.

= Capturing a Pose =
Once you have created a robot, PyPose will adjust to show the correct number of sliding servo adjustment bars. The box to the right of the adjustment bars displays the names of poses we have captured, since we haven't captured any, it will be blank. Below the pose list, we have two buttons: _add_ and _remove_. Click on _add_ and enter a name for your pose. I typically create a pose named "stand", for the default standing position of my bot. 

Now, be sure to click on the pose name in the pose list, then click _capture_, some messages will scroll by, and then the servo adjustment bars will be set to the current servo positions. You can adjust some if needed, and then click _set_ to send the on-screen positions back out to the servos. In order to pose the servos again, click _relax_ to release the servos and make them limp again.

_Note: Be careful when clicking_ capture, _as it will overwrite any data attached to the pose currently selected in the pose list._ 

If for some reason a servo does not respond, there may be a delay in the pose capture. A message box will eventually be displayed, telling which servos were unreadable. Check your connections if this happens:

<img src="http://arbotix.googlecode.com/svn/wiki/errors.png">

= Creating Sequences =


= Parametric Poses = 


= Exporting to the AVR = 
Selecting *Pose|Export to AVR* will allow you to save a C header file, which contains all of your poses, in a format that stores them in FLASH memory, and makes them available to the BioloidController. 

= NUKE = 
NUKE is currently under development.

= Hacking =
Robot pose files are plain text. The format is quite simple, the first line is the robot name and servo count, separated by a colon. Each line after that should be a pose name, colon, and then the servo values. 
{{{
myNewRobot:4
pose1: 512, 512, 512, 512 
poseX: 92, 104, 92, 800
}}}

The communications protocol used by PyPose and the sketch on your arbotiX is essentially the same as the Bioloid bus itself. We have, however, defined additional registers, and an ID of 253 will command the arbotiX to act on these special registers. Much of this functionality is not complete, but will eventually allow live playback of poses, etc. 

= To Do =
While PyPose provides basic functionality, it is not quite done yet. There is a long list of features that still need to be added:
  * Easy method for capturing min/max servo positions.
  * Undo a capture (recover pose values).
  * Drop-down selection of serial ports.
  * Play poses live.  
  * Parameterized Pose Capture Engine. 
  * Direct pass-thru driver for USBDynamixel, ability to select which driver to use.